// Code generated by protoc-gen-go. DO NOT EDIT.
// source: identity/v1/identity.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateUserRequest struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateUserRequest) Reset()         { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()    {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2343b5ee8923b571, []int{0}
}

func (m *CreateUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateUserRequest.Unmarshal(m, b)
}
func (m *CreateUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateUserRequest.Marshal(b, m, deterministic)
}
func (m *CreateUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserRequest.Merge(m, src)
}
func (m *CreateUserRequest) XXX_Size() int {
	return xxx_messageInfo_CreateUserRequest.Size(m)
}
func (m *CreateUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserRequest proto.InternalMessageInfo

func (m *CreateUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type GetUserByUsernameRequest struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserByUsernameRequest) Reset()         { *m = GetUserByUsernameRequest{} }
func (m *GetUserByUsernameRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserByUsernameRequest) ProtoMessage()    {}
func (*GetUserByUsernameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2343b5ee8923b571, []int{1}
}

func (m *GetUserByUsernameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserByUsernameRequest.Unmarshal(m, b)
}
func (m *GetUserByUsernameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserByUsernameRequest.Marshal(b, m, deterministic)
}
func (m *GetUserByUsernameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserByUsernameRequest.Merge(m, src)
}
func (m *GetUserByUsernameRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserByUsernameRequest.Size(m)
}
func (m *GetUserByUsernameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserByUsernameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserByUsernameRequest proto.InternalMessageInfo

func (m *GetUserByUsernameRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type ListUsersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUsersRequest) Reset()         { *m = ListUsersRequest{} }
func (m *ListUsersRequest) String() string { return proto.CompactTextString(m) }
func (*ListUsersRequest) ProtoMessage()    {}
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2343b5ee8923b571, []int{2}
}

func (m *ListUsersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUsersRequest.Unmarshal(m, b)
}
func (m *ListUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUsersRequest.Marshal(b, m, deterministic)
}
func (m *ListUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUsersRequest.Merge(m, src)
}
func (m *ListUsersRequest) XXX_Size() int {
	return xxx_messageInfo_ListUsersRequest.Size(m)
}
func (m *ListUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUsersRequest proto.InternalMessageInfo

type ListUsersResponse struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUsersResponse) Reset()         { *m = ListUsersResponse{} }
func (m *ListUsersResponse) String() string { return proto.CompactTextString(m) }
func (*ListUsersResponse) ProtoMessage()    {}
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2343b5ee8923b571, []int{3}
}

func (m *ListUsersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUsersResponse.Unmarshal(m, b)
}
func (m *ListUsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUsersResponse.Marshal(b, m, deterministic)
}
func (m *ListUsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUsersResponse.Merge(m, src)
}
func (m *ListUsersResponse) XXX_Size() int {
	return xxx_messageInfo_ListUsersResponse.Size(m)
}
func (m *ListUsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUsersResponse proto.InternalMessageInfo

func (m *ListUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type CreateUserSessionRequest struct {
	UserSession          *UserSession `protobuf:"bytes,1,opt,name=user_session,json=userSession,proto3" json:"user_session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateUserSessionRequest) Reset()         { *m = CreateUserSessionRequest{} }
func (m *CreateUserSessionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateUserSessionRequest) ProtoMessage()    {}
func (*CreateUserSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2343b5ee8923b571, []int{4}
}

func (m *CreateUserSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateUserSessionRequest.Unmarshal(m, b)
}
func (m *CreateUserSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateUserSessionRequest.Marshal(b, m, deterministic)
}
func (m *CreateUserSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserSessionRequest.Merge(m, src)
}
func (m *CreateUserSessionRequest) XXX_Size() int {
	return xxx_messageInfo_CreateUserSessionRequest.Size(m)
}
func (m *CreateUserSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserSessionRequest proto.InternalMessageInfo

func (m *CreateUserSessionRequest) GetUserSession() *UserSession {
	if m != nil {
		return m.UserSession
	}
	return nil
}

type GetUserSessionRequest struct {
	UserSession          *UserSession `protobuf:"bytes,1,opt,name=user_session,json=userSession,proto3" json:"user_session,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetUserSessionRequest) Reset()         { *m = GetUserSessionRequest{} }
func (m *GetUserSessionRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserSessionRequest) ProtoMessage()    {}
func (*GetUserSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2343b5ee8923b571, []int{5}
}

func (m *GetUserSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUserSessionRequest.Unmarshal(m, b)
}
func (m *GetUserSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUserSessionRequest.Marshal(b, m, deterministic)
}
func (m *GetUserSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserSessionRequest.Merge(m, src)
}
func (m *GetUserSessionRequest) XXX_Size() int {
	return xxx_messageInfo_GetUserSessionRequest.Size(m)
}
func (m *GetUserSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserSessionRequest proto.InternalMessageInfo

func (m *GetUserSessionRequest) GetUserSession() *UserSession {
	if m != nil {
		return m.UserSession
	}
	return nil
}

type User struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string               `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password             string               `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	PrimaryEmail         string               `protobuf:"bytes,4,opt,name=primary_email,json=primaryEmail,proto3" json:"primary_email,omitempty"`
	FistName             string               `protobuf:"bytes,5,opt,name=fist_name,json=fistName,proto3" json:"fist_name,omitempty"`
	LastName             string               `protobuf:"bytes,6,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	FullName             string               `protobuf:"bytes,7,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	SignupId             string               `protobuf:"bytes,8,opt,name=signup_id,json=signupId,proto3" json:"signup_id,omitempty"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_2343b5ee8923b571, []int{6}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetPrimaryEmail() string {
	if m != nil {
		return m.PrimaryEmail
	}
	return ""
}

func (m *User) GetFistName() string {
	if m != nil {
		return m.FistName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *User) GetSignupId() string {
	if m != nil {
		return m.SignupId
	}
	return ""
}

func (m *User) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

type UserSession struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Status ENUM
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UserSession) Reset()         { *m = UserSession{} }
func (m *UserSession) String() string { return proto.CompactTextString(m) }
func (*UserSession) ProtoMessage()    {}
func (*UserSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_2343b5ee8923b571, []int{7}
}

func (m *UserSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserSession.Unmarshal(m, b)
}
func (m *UserSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserSession.Marshal(b, m, deterministic)
}
func (m *UserSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserSession.Merge(m, src)
}
func (m *UserSession) XXX_Size() int {
	return xxx_messageInfo_UserSession.Size(m)
}
func (m *UserSession) XXX_DiscardUnknown() {
	xxx_messageInfo_UserSession.DiscardUnknown(m)
}

var xxx_messageInfo_UserSession proto.InternalMessageInfo

func (m *UserSession) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *UserSession) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserSession) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateUserRequest)(nil), "oswee.identity.v1.CreateUserRequest")
	proto.RegisterType((*GetUserByUsernameRequest)(nil), "oswee.identity.v1.GetUserByUsernameRequest")
	proto.RegisterType((*ListUsersRequest)(nil), "oswee.identity.v1.ListUsersRequest")
	proto.RegisterType((*ListUsersResponse)(nil), "oswee.identity.v1.ListUsersResponse")
	proto.RegisterType((*CreateUserSessionRequest)(nil), "oswee.identity.v1.CreateUserSessionRequest")
	proto.RegisterType((*GetUserSessionRequest)(nil), "oswee.identity.v1.GetUserSessionRequest")
	proto.RegisterType((*User)(nil), "oswee.identity.v1.User")
	proto.RegisterType((*UserSession)(nil), "oswee.identity.v1.UserSession")
}

func init() { proto.RegisterFile("identity/v1/identity.proto", fileDescriptor_2343b5ee8923b571) }

var fileDescriptor_2343b5ee8923b571 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x55, 0xbb, 0xad, 0x5b, 0x6e, 0xc7, 0xb4, 0x5a, 0x42, 0x0d, 0x99, 0x80, 0x29, 0xeb, 0xc3,
	0xa4, 0x8a, 0x44, 0x2b, 0x8f, 0xbc, 0x40, 0x27, 0x34, 0x4d, 0x20, 0x24, 0x3a, 0x40, 0xa2, 0x12,
	0x0a, 0x69, 0xe3, 0x16, 0x4b, 0x49, 0x1c, 0x62, 0xbb, 0x53, 0x1f, 0x78, 0xe1, 0xb7, 0xf0, 0x57,
	0xf8, 0x5f, 0xc8, 0x76, 0xdc, 0xa6, 0x6b, 0x53, 0xc4, 0xc7, 0x4b, 0x14, 0x9f, 0x7b, 0x7c, 0xec,
	0x9c, 0x7b, 0x4f, 0xc0, 0x21, 0x11, 0x4e, 0x39, 0xe1, 0x73, 0x7f, 0x76, 0xe1, 0x9b, 0x77, 0x2f,
	0xcb, 0x29, 0xa7, 0xa8, 0x45, 0xd9, 0x2d, 0xc6, 0xde, 0x02, 0x9d, 0x5d, 0x38, 0x8f, 0xa7, 0x94,
	0x4e, 0x63, 0xec, 0x2b, 0xc2, 0x48, 0x4c, 0x7c, 0x4e, 0x12, 0xcc, 0x78, 0x98, 0x64, 0x7a, 0x8f,
	0xfb, 0x1c, 0x5a, 0x97, 0x39, 0x0e, 0x39, 0x7e, 0xcf, 0x70, 0x3e, 0xc0, 0x5f, 0x05, 0x66, 0x1c,
	0x75, 0x61, 0x57, 0x30, 0x9c, 0xdb, 0xb5, 0xd3, 0xda, 0x79, 0xb3, 0xd7, 0xf6, 0xd6, 0x74, 0x3d,
	0xc5, 0x56, 0x24, 0xf7, 0x0a, 0xec, 0x2b, 0xcc, 0x25, 0xd0, 0x9f, 0xcb, 0x67, 0x1a, 0x26, 0xf8,
	0xaf, 0x84, 0x10, 0x1c, 0xbf, 0x26, 0x4c, 0x29, 0xb1, 0x42, 0xc0, 0xed, 0x43, 0xab, 0x84, 0xb1,
	0x8c, 0xa6, 0x0c, 0xa3, 0x27, 0xb0, 0x27, 0x37, 0x30, 0xbb, 0x76, 0xba, 0xb3, 0x4d, 0x56, 0xb3,
	0xdc, 0x4f, 0x60, 0x2f, 0x3f, 0xf1, 0x06, 0x33, 0x46, 0x68, 0x6a, 0x2e, 0xf8, 0x02, 0x0e, 0x25,
	0x29, 0x60, 0x1a, 0x2e, 0x2e, 0xfa, 0xa8, 0x42, 0xd1, 0x6c, 0x6e, 0x8a, 0xe5, 0xc2, 0x1d, 0xc2,
	0xfd, 0xe2, 0xfb, 0xff, 0xbf, 0xf6, 0x8f, 0x3a, 0xec, 0xca, 0x22, 0x3a, 0x82, 0x3a, 0x89, 0x94,
	0x82, 0x35, 0xa8, 0x93, 0x08, 0x39, 0x70, 0x20, 0x0a, 0xaf, 0xed, 0xba, 0x42, 0x17, 0x6b, 0x59,
	0xcb, 0x42, 0xc6, 0x6e, 0x69, 0x1e, 0xd9, 0x3b, 0xba, 0x66, 0xd6, 0xe8, 0x0c, 0xee, 0x65, 0x39,
	0x49, 0xc2, 0x7c, 0x1e, 0xe0, 0x24, 0x24, 0xb1, 0xbd, 0xab, 0x08, 0x87, 0x05, 0xf8, 0x52, 0x62,
	0xe8, 0x04, 0xac, 0x09, 0x61, 0x3c, 0x50, 0xea, 0x7b, 0x5a, 0x41, 0x02, 0x6f, 0xa4, 0xfa, 0x09,
	0x58, 0x71, 0x68, 0x8a, 0x0d, 0x5d, 0x94, 0x80, 0x29, 0x4e, 0x44, 0x1c, 0xeb, 0xe2, 0x7e, 0xb1,
	0x53, 0xc4, 0xb1, 0x29, 0x32, 0x32, 0x4d, 0x45, 0x16, 0x90, 0xc8, 0x3e, 0xd0, 0x45, 0x0d, 0x5c,
	0x47, 0xe8, 0x19, 0x34, 0xc7, 0xaa, 0x49, 0x81, 0x9c, 0x50, 0xdb, 0x52, 0x5e, 0x39, 0x9e, 0x1e,
	0x5f, 0xcf, 0x8c, 0xaf, 0xf7, 0xce, 0x8c, 0xef, 0x00, 0x34, 0x5d, 0x02, 0xee, 0xf7, 0x1a, 0x34,
	0x4b, 0x1e, 0xa2, 0x87, 0x00, 0x85, 0xe9, 0xc1, 0xc2, 0x35, 0xab, 0x40, 0xae, 0x23, 0xd4, 0x86,
	0x7d, 0xd5, 0x18, 0x12, 0x15, 0xde, 0x35, 0xe4, 0xf2, 0x1f, 0x2f, 0xd1, 0x0b, 0x01, 0xc9, 0x3b,
	0x5c, 0xd2, 0x24, 0x09, 0xd3, 0xe8, 0x06, 0xe7, 0x33, 0x32, 0xc6, 0xe8, 0x15, 0xc0, 0x72, 0xf8,
	0x50, 0x67, 0x43, 0xf3, 0xd7, 0xe2, 0xe7, 0x54, 0x0d, 0x74, 0xef, 0x67, 0x0d, 0x8e, 0xe5, 0xcb,
	0x5b, 0x81, 0xf3, 0xb9, 0x39, 0xe1, 0x23, 0xb4, 0xd6, 0xf2, 0x87, 0xba, 0x1b, 0x24, 0xaa, 0x52,
	0x5a, 0x79, 0x1e, 0xfa, 0x00, 0xd6, 0x22, 0x7d, 0xe8, 0x6c, 0x03, 0xeb, 0x6e, 0x5e, 0x9d, 0xce,
	0x76, 0x92, 0x0e, 0x70, 0xef, 0x1b, 0x3c, 0x28, 0xb5, 0xeb, 0x8e, 0x63, 0x9f, 0xcb, 0x7f, 0x24,
	0xd3, 0xd1, 0xee, 0x56, 0xe3, 0x56, 0x83, 0xe7, 0xfc, 0x26, 0x62, 0x3d, 0x01, 0xed, 0xd2, 0x72,
	0xc5, 0xcc, 0x21, 0x1c, 0xad, 0x86, 0x19, 0x9d, 0x57, 0x3b, 0xf9, 0x67, 0xc7, 0xf6, 0x3b, 0x43,
	0x77, 0x4a, 0xf8, 0x17, 0x31, 0xf2, 0xc6, 0x34, 0xf1, 0x15, 0xd7, 0x67, 0x5c, 0x8c, 0x98, 0x5f,
	0xfa, 0xa7, 0x8f, 0x1a, 0x6a, 0xcc, 0x9e, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x0e, 0xc3,
	0x46, 0xe9, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserCommandServiceClient is the client API for UserCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserCommandServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
}

type userCommandServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserCommandServiceClient(cc *grpc.ClientConn) UserCommandServiceClient {
	return &userCommandServiceClient{cc}
}

func (c *userCommandServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/oswee.identity.v1.UserCommandService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCommandServiceServer is the server API for UserCommandService service.
type UserCommandServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
}

func RegisterUserCommandServiceServer(s *grpc.Server, srv UserCommandServiceServer) {
	s.RegisterService(&_UserCommandService_serviceDesc, srv)
}

func _UserCommandService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommandServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oswee.identity.v1.UserCommandService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommandServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserCommandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oswee.identity.v1.UserCommandService",
	HandlerType: (*UserCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserCommandService_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/v1/identity.proto",
}

// UserQueryServiceClient is the client API for UserQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserQueryServiceClient interface {
	GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*User, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
}

type userQueryServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserQueryServiceClient(cc *grpc.ClientConn) UserQueryServiceClient {
	return &userQueryServiceClient{cc}
}

func (c *userQueryServiceClient) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/oswee.identity.v1.UserQueryService/GetUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userQueryServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/oswee.identity.v1.UserQueryService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserQueryServiceServer is the server API for UserQueryService service.
type UserQueryServiceServer interface {
	GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*User, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
}

func RegisterUserQueryServiceServer(s *grpc.Server, srv UserQueryServiceServer) {
	s.RegisterService(&_UserQueryService_serviceDesc, srv)
}

func _UserQueryService_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQueryServiceServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oswee.identity.v1.UserQueryService/GetUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQueryServiceServer).GetUserByUsername(ctx, req.(*GetUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserQueryService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserQueryServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oswee.identity.v1.UserQueryService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserQueryServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oswee.identity.v1.UserQueryService",
	HandlerType: (*UserQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByUsername",
			Handler:    _UserQueryService_GetUserByUsername_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserQueryService_ListUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/v1/identity.proto",
}

// UserSessionCommandServiceClient is the client API for UserSessionCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSessionCommandServiceClient interface {
	CreateUserSession(ctx context.Context, in *CreateUserSessionRequest, opts ...grpc.CallOption) (*UserSession, error)
}

type userSessionCommandServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserSessionCommandServiceClient(cc *grpc.ClientConn) UserSessionCommandServiceClient {
	return &userSessionCommandServiceClient{cc}
}

func (c *userSessionCommandServiceClient) CreateUserSession(ctx context.Context, in *CreateUserSessionRequest, opts ...grpc.CallOption) (*UserSession, error) {
	out := new(UserSession)
	err := c.cc.Invoke(ctx, "/oswee.identity.v1.UserSessionCommandService/CreateUserSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSessionCommandServiceServer is the server API for UserSessionCommandService service.
type UserSessionCommandServiceServer interface {
	CreateUserSession(context.Context, *CreateUserSessionRequest) (*UserSession, error)
}

func RegisterUserSessionCommandServiceServer(s *grpc.Server, srv UserSessionCommandServiceServer) {
	s.RegisterService(&_UserSessionCommandService_serviceDesc, srv)
}

func _UserSessionCommandService_CreateUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionCommandServiceServer).CreateUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oswee.identity.v1.UserSessionCommandService/CreateUserSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionCommandServiceServer).CreateUserSession(ctx, req.(*CreateUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSessionCommandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oswee.identity.v1.UserSessionCommandService",
	HandlerType: (*UserSessionCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserSession",
			Handler:    _UserSessionCommandService_CreateUserSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/v1/identity.proto",
}

// UserSessionQueryServiceClient is the client API for UserSessionQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSessionQueryServiceClient interface {
	GetUserSession(ctx context.Context, in *GetUserSessionRequest, opts ...grpc.CallOption) (*UserSession, error)
}

type userSessionQueryServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserSessionQueryServiceClient(cc *grpc.ClientConn) UserSessionQueryServiceClient {
	return &userSessionQueryServiceClient{cc}
}

func (c *userSessionQueryServiceClient) GetUserSession(ctx context.Context, in *GetUserSessionRequest, opts ...grpc.CallOption) (*UserSession, error) {
	out := new(UserSession)
	err := c.cc.Invoke(ctx, "/oswee.identity.v1.UserSessionQueryService/GetUserSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSessionQueryServiceServer is the server API for UserSessionQueryService service.
type UserSessionQueryServiceServer interface {
	GetUserSession(context.Context, *GetUserSessionRequest) (*UserSession, error)
}

func RegisterUserSessionQueryServiceServer(s *grpc.Server, srv UserSessionQueryServiceServer) {
	s.RegisterService(&_UserSessionQueryService_serviceDesc, srv)
}

func _UserSessionQueryService_GetUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionQueryServiceServer).GetUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oswee.identity.v1.UserSessionQueryService/GetUserSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionQueryServiceServer).GetUserSession(ctx, req.(*GetUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSessionQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oswee.identity.v1.UserSessionQueryService",
	HandlerType: (*UserSessionQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserSession",
			Handler:    _UserSessionQueryService_GetUserSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/v1/identity.proto",
}
